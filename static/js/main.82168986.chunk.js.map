{"version":3,"sources":["components/Header/Header.js","components/Search/Search.js","components/ListItem/ListItem.js","components/TodoList/TodoList.js","components/ItemStatusFilter/ItemStatusFilter.js","components/ItemAddForm/ItemAddForm.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","done","todo","className","Search","onSearchChange","value","type","placeholder","onChange","e","target","ListItem","this","props","todoDataLabel","onDeleteListItem","onImportant","important","onDone","classNames","onClick","Component","TodoList","todoData","onDeleteList","map","el","key","id","label","ItemStatusFilter","buttons","filterName","filter","onFilter","btnClass","ItemAddForm","state","itemsToAdd","onChangeHandler","setState","onSumbitForm","preventDefault","trim","length","onAdd","onSubmit","event","App","maxId","todos","keyword","onDeleteHandler","onAddHandler","text","currentState","newObj","push","onToggleImportant","onToggleProperty","onToggleDone","search","data","toLowerCase","includes","onSearchChangeHandler","onFilterChange","arr","propName","idx","findIndex","oldItem","newItem","splice","visibleItems","doneCount","todoCount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82168986.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = ({done, todo}) => {\n    return(\n        <div className=\"d-flex Header\">\n            <h1>Todo list</h1>\n            <h2>{todo} more to do, {done} done</h2>\n        </div>\n        )\n}\nexport default Header;","import React from 'react';\nimport './Search.css';\n\nconst Search = ({onSearchChange, value}) => {\n\n    return <input \n            className=\"form-control SearchInput\" \n            type=\"text\" \n            placeholder=\"Type to search\"\n            value={value}\n            onChange={(e) => onSearchChange(e.target.value)}/>\n}\nexport default Search;","import React, { Component } from \"react\";\nimport \"./ListItem.css\";\n\nexport default class ListItem extends Component {\n\n  render() {\n    const { todoDataLabel, onDeleteListItem, onImportant, important, onDone, done } = this.props;\n\n    let classNames = \"ListItem\";\n    if (done) {\n      classNames += \" done\";\n    }\n\n    if (important) {\n      classNames += ' important'\n    }\n\n    return (\n      <span className={classNames}>\n        <span \n          className=\"ListItemLabel\"\n          onClick={onDone} \n        >\n          {todoDataLabel}\n        </span>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-success btn-sm float-right\"\n          onClick={onImportant}>\n          <i className=\"fa fa-exclamation\" />\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger btn-sm float-right\"\n          onClick={onDeleteListItem}\n        >\n          <i className=\"fa fa-trash-o\" />\n        </button>\n      </span>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./TodoList.css\";\nimport ListItem from \"../ListItem/ListItem\";\n\nconst TodoList = ({ todoData, onDeleteList, onDone, onImportant }) => {\n  return (\n    <ul className=\"list-group TodoList\">\n      {todoData.map((el) => {\n        return (\n          <li className=\"list-group-item\" key={el.id}>\n            <ListItem\n              todoDataLabel={el.label}\n              important={el.important}\n              done={el.done}\n              onDeleteListItem={() => onDeleteList(el.id)}\n              onImportant={() => onImportant(el.id)}\n              onDone={() => onDone(el.id)}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default TodoList;\n","import React, {Component} from 'react';\nimport './ItemStatusFilter.css';\n\nexport default class ItemStatusFilter extends Component {\n\n    buttons = [\n        {filterName: 'all', label: 'All'},\n        {filterName: 'active', label: 'Active'},\n        {filterName: 'done', label: 'Done'}\n    ]\n\n\n    render() {\n        const {filter, onFilter} = this.props;\n        const buttons = this.buttons.map((el) => {\n            const isActive = filter === el.filterName;\n            const btnClass = isActive ? 'btn-info' : 'btn-outline-secondary';\n            return(\n                <button \n                    type=\"button\" \n                    className={`btn ${btnClass}`}\n                    key={el.filterName}\n                    onClick={() => onFilter(el.filterName)}\n                >\n                    {el.label}\n                </button>\n            )\n        })    \n        return(\n            <div className=\"btn-group\">\n                {buttons}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './ItemAddForm.css'\n\nexport default class ItemAddForm extends Component {\n\n    state = {\n        itemsToAdd: ''\n    }\n\n    onChangeHandler = (e) => {\n        this.setState({\n            itemsToAdd: e.target.value\n        })\n    }\n\n    onSumbitForm = (e) => {\n        e.preventDefault();\n        if(this.state.itemsToAdd.trim().length !== 0) {\n            this.props.onAdd(this.state.itemsToAdd);\n            this.setState({\n                itemsToAdd: ''\n            })\n        }\n    }\n\n    render() {\n        return(\n            <form className=\"ItemAddForm\"\n                  onSubmit={(event) => this.onSumbitForm(event)}>\n                <input \n                    type=\"text\" \n                    className=\"form-control SearchInput\" \n                    placeholder=\"Enter job name\"\n                    value={this.state.itemsToAdd} \n                    onChange={this.onChangeHandler}/>\n                <button className=\"btn btn-success\">Add</button>\n            </form>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"../Header/Header\";\nimport Search from \"../Search/Search\";\nimport TodoList from \"../TodoList/TodoList\";\nimport ItemStatusFilter from \"../ItemStatusFilter/ItemStatusFilter\";\nimport ItemAddForm from \"../ItemAddForm/ItemAddForm\";\n\nclass App extends Component {\n  maxId = 100;\n\n  state = {\n    todos: [\n\n    ],\n    keyword: '',\n    filter: 'all'\n  };\n\n  onDeleteHandler = (id) => {\n    this.setState(({ todos }) => {\n      const newArray = todos.filter((el) => el.id !== id);\n      return {\n        todos: newArray,\n      };\n    });\n  };\n\n  onAddHandler = (text) => {\n    this.setState(({ todos }) => {\n      const currentState = [...todos];\n\n      let newObj = { label: text, id: this.maxId++ };\n\n      currentState.push(newObj);\n\n      return {\n        todos: currentState,\n      };\n    });\n  };\n\n  onToggleProperty(arr, id, propName) {\n    const currentState = [...arr];\n    const idx = currentState.findIndex((el) => el.id === id);\n    const oldItem = currentState[idx];\n    const newItem = {...oldItem, [propName]: !oldItem[propName]};\n    currentState.splice(idx, 1, newItem);\n    return currentState;\n\n  }\n\n\n  onToggleImportant = (id) => {\n    this.setState(({ todos }) => {\n      return {\n        todos: this.onToggleProperty(todos, id, 'important'),\n      };\n    });\n  };\n\n  onToggleDone = (id) => {\n    this.setState(({ todos }) => {\n      return {\n        todos: this.onToggleProperty(todos, id, 'done')\n      };\n    });\n  };\n\n  search = (data, keyword) => {\n    if(keyword.length === 0) {\n      return data;\n    }\n    return data.filter((el) => {\n      return el.label.toLowerCase().includes(keyword.toLowerCase());\n    })\n  }\n\n  onSearchChangeHandler = (text) => {\n    this.setState({\n      keyword: text\n    })\n  }\n\n  filter = (data, filter) => {\n      switch(filter) {\n        case('all'):\n          return data;\n  \n        case('active'):\n          return data.filter((el) => !el.done);\n          \n        case('done'):\n          return data.filter((el) => el.done);\n  \n        default:\n          return data;  \n        }  \n  }\n\n  onFilterChange = (filter) => {\n    this.setState({\n      filter: filter\n    })\n  }\n\n\n  \n\n  render() {\n    const {todos, keyword, filter} = this.state;\n    const visibleItems = this.filter(this.search(todos, keyword), filter);\n    const doneCount = this.state.todos.filter((el) => el.done).length;\n    const todoCount = this.state.todos.length - doneCount;\n\n    return (\n      <div className=\"App\">\n        <Header \n          done={doneCount}\n          todo={todoCount}\n        />\n        <div className=\"TopPanel d-flex\">\n          <Search \n           onSearchChange={this.onSearchChangeHandler}\n           value={keyword}\n          />\n          <ItemStatusFilter \n            filter={filter}\n            onFilter={this.onFilterChange}\n          />\n        </div>\n        <TodoList\n          todoData={visibleItems}\n          onDeleteList={this.onDeleteHandler}\n          onImportant={this.onToggleImportant}\n          onDone={this.onToggleDone}\n        />\n        <ItemAddForm \n          onAdd={this.onAddHandler}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}